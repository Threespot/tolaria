module Tolaria

  @safe_mangagment = false
  @managed_classes = []
  @managed_controllers = []

  # True if the application has actually booted
  # and Tolaria is safe to start referencing models
  def self.safe_management
    @safe_mangagment
  end

  # Se the value of Tolaria.safe_management. +bool+ should be truthy.
  # Don't call this method directly.
  def self.safe_management=(bool)
    @safe_mangagment = !!bool
  end

  # Tolaria keeps a list of all managed classes and the controllers
  # for those classes internally so that other parts of the system
  # can iterate over them. Return the list.
  def self.managed_classes
    @managed_classes
  end

  # Return a list of all of the autogenerated controllers.
  def self.managed_controllers
    @managed_controllers
  end

  # Internal factory for adding managed classes. Developers should
  # use ActiveRecord::Base#manage_with_tolaria.
  def self.manage(klass, options = {})
    # If we already have a class of this name, discard it
    discard_managed_class(klass)
    # Wrap the Rails model inside a Tolaria::ManagedClass
    managed_klass = Tolaria::ManagedClass.create(klass, options)
    # Create a controller for the model to use in the admin namespace
    managed_controller = Class.new(Tolaria::ResourceController)
    ::Admin.const_set(managed_klass.controller_name, managed_controller)
    # Add these things to the internal tracker
    @managed_classes.push(managed_klass)
    @managed_controllers.push(managed_controller)
    return managed_klass
  end

  # Discard a managed class instance for the given ActiveRecord::Base
  def self.discard_managed_class(klass)
    @managed_classes.each_with_index do |managed_class, index|
      if klass.to_s == managed_class.klass.to_s
        @managed_controllers.reject! do |controller|
          controller.to_s == "Admin::#{managed_class.controller_name}"
        end
        ::Admin.send(:remove_const, managed_class.controller_name)
        @managed_classes.delete_at(index)
        return true
      end
    end
    return false
  end

end
